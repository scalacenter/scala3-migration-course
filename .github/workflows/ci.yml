name: Scala 3 Migration Course CI

on:
  push:
    tags: '*'
    paths-ignore:
      - 'README.md'
      - '**/README.md'
      - 'bin/**'
    branches: [ main ]
  pull_request:
    paths-ignore:
      - 'README.md'
      - '**/README.md'
      - 'bin/**'
    branches: [ main ]

  workflow_dispatch:

permissions:
  contents: write

jobs:
  list-exercises:
    runs-on: ubuntu-latest
    outputs:
      exercises: ${{steps.list.outputs.exercises}}
    steps:
      - uses: actions/checkout@v3
      - id: list
        run: echo "::set-output name=exercises::$(ls ./exercises | grep exercise_ | jq -cnR '[inputs | select(length>0)]')"

  test-exercise:
    runs-on: ubuntu-latest
    needs: list-exercises
    strategy:
      fail-fast: false
      matrix:
        exercise: ${{fromJson(needs.list-exercises.outputs.exercises)}}
    name: Test ${{matrix.exercise}} 
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        cache: 'sbt'
        distribution: 'temurin'

    - name: Test with sbt
      run: sbt test
      working-directory: ./exercises/${{matrix.exercise}}

  create-release:
    runs-on: ubuntu-latest
    needs: [test-exercise]
    # Release gets triggered only on creating new tags
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    name: Release ${{ github.ref }}
    steps:
      - name: Checkout Course Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Coursier Cache
        uses: coursier/cache-action@v6.2

      - name: Set up Coursier
        uses: coursier/setup-action@v1
        with:
          jvm: temurin:11

      - name: Check code formatting
        run: sbt "scalafmtCheckAll ; scalafmtSbtCheck"

      - name: Setup Course Management Tools  
        run: |
          cs install --contrib cmta

      - name: Configure Git user
        run: |
          git config --global user.email "noreply@github.com"
          git config --global user.name "GitHub"

      - name: Studentify Repo
        run: |
          mkdir ${{ runner.temp }}/studentified
          cmta studentify -f -g -m . -d ${{ runner.temp }}/studentified
          (cd ${{ runner.temp }}/studentified && exec zip -r scala3-migration-course-student.zip scala3-migration-course)  
          
      - name: Linearize Repo
        run: |
          mkdir ${{ runner.temp }}/linearized
          cmta linearize -f -m . -d ${{ runner.temp }}/linearized
          (cd ${{ runner.temp }}/linearized && exec zip -r scala3-migration-course-linearized.zip scala3-migration-course)
        
      - name: Create Github Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          
      - name: Upload Studentified repo to Github release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # release created from previous step
          asset_path: ${{ runner.temp }}/studentified/scala3-migration-course-student.zip
          asset_name: scala3-migration-course-student.zip
          asset_content_type: application/zip

      - name: Upload Linearized repo to Github release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # release created from previous step
          asset_path: ${{ runner.temp }}/linearized/scala3-migration-course-linearized.zip
          asset_name: scala3-migration-course-linearized.zip
          asset_content_type: application/zip
